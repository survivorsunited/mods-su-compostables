# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

# Environment variables will be set dynamically from gradle.properties

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'
          
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4
        
      - name: Make Gradle executable
        run: chmod +x ./gradlew
        
      - name: Build project
        run: ./gradlew build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: build/libs/

  docs:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
          
      - name: Install dependencies
        run: |
          cd docs
          npm ci
          
      - name: Build documentation
        run: |
          cd docs
          npm run build
          
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/build

  deploy-docs:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-24.04
    needs: docs    
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  auto-version:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, docs]
    runs-on: ubuntu-24.04
    outputs:
      version_changed: ${{ steps.version_changed.outputs.changed }}
      new_version: ${{ steps.new_version.outputs.new_version }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'
          
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep "^mod_version=" gradle.properties | cut -d'=' -f2)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          
      - name: Increment patch version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          # Split version into parts (assume semantic versioning: x.y.z)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
      - name: Update gradle.properties
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i "s/^mod_version=.*/mod_version=$NEW_VERSION/" gradle.properties
          echo "Updated gradle.properties with version $NEW_VERSION"
          
      - name: Check if version changed
        id: version_changed
        run: |
          if git diff --quiet gradle.properties; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change needed"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version will be updated"
          fi
          
      - name: Commit and tag new version
        if: steps.version_changed.outputs.changed == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit version bump
          git add gradle.properties
          git commit -m "Bump version to $NEW_VERSION"
          
          # Create and push tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin main
          git push origin "$NEW_VERSION"
          
          echo "✅ Version bumped to $NEW_VERSION and tagged"

  release:
    needs: [auto-version]
    if: needs.auto-version.outputs.version_changed == 'true'
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'
          
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4
        
      - name: Make Gradle executable
        run: chmod +x ./gradlew
        
      - name: Extract properties from gradle.properties
        id: properties
        run: |
          echo "modName=$(./gradlew -q printProperty -Pproperty=jar_name)" >> $GITHUB_OUTPUT
          echo "modTitle=$(./gradlew -q printProperty -Pproperty=mod_name)" >> $GITHUB_OUTPUT
          echo "modDescription=$(./gradlew -q printProperty -Pproperty=mod_description)" >> $GITHUB_OUTPUT
          echo "modVersion=$(./gradlew -q printProperty -Pproperty=mod_version)" >> $GITHUB_OUTPUT
        
      - name: Build project with updated version
        run: ./gradlew clean build
          
      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ needs.auto-version.outputs.new_version }}"
          if git describe --tags --abbrev=0 HEAD^ 2>/dev/null; then
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
            CHANGELOG="## Changes in $NEW_VERSION"
            CHANGELOG="$CHANGELOG"$'\n'
            CHANGELOG="$CHANGELOG$(git log --pretty=format:'- %s' $PREV_TAG..HEAD)"
          else
            CHANGELOG="## Initial Release $NEW_VERSION"
            CHANGELOG="$CHANGELOG"$'\n'
            CHANGELOG="$CHANGELOG- Initial release of ${{ steps.properties.outputs.modTitle }}"
            CHANGELOG="$CHANGELOG"$'\n'
            CHANGELOG="$CHANGELOG- ${{ steps.properties.outputs.modDescription }}"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.auto-version.outputs.new_version }}
          name: Release ${{ needs.auto-version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: build/libs/${{ steps.properties.outputs.modName }}-*.jar
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # - name: Update Modrinth project description
      #   env:
      #     MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
      #     PROJECT_ID: ${{ secrets.PROJECT_ID }}
      #   run: |
      #     if [ -n "$MODRINTH_TOKEN" ] && [ -n "$PROJECT_ID" ]; then
      #       echo "Updating Modrinth project description..."
      #       # Use docs/MODRINTH.md if it exists, otherwise use docs/docs/modrinth.md
      #       if [ -f "docs/MODRINTH.md" ]; then
      #         DESCRIPTION=$(cat docs/MODRINTH.md | jq -Rs .)
      #       else
      #         # Extract content after the front matter from modrinth.md
      #         DESCRIPTION=$(awk '/^---$/{if(++count==2)next}/^---$/&&count<2{next}1' docs/docs/modrinth.md | jq -Rs .)
      #       fi
            
      #       curl -X PATCH \
      #         -H "Authorization: $MODRINTH_TOKEN" \
      #         -H "Content-Type: application/json" \
      #         -d "{\"description\": $DESCRIPTION}" \
      #         "https://api.modrinth.com/v2/project/$PROJECT_ID" \
      #         --fail-with-body
              
      #       echo "✅ Modrinth project description updated"
      #     else
      #       echo "⚠️ Skipping Modrinth update - MODRINTH_TOKEN or PROJECT_ID not set"
      #     fi
          
      - name: Publish to Modrinth
        uses: cloudnode-pro/modrinth-publish@v2
        with:
          token: ${{ secrets.MODRINTH_TOKEN }}
          project: ${{ secrets.PROJECT_ID }}
          loaders: fabric
          files: build/libs/${{ steps.properties.outputs.modName }}-${{ needs.auto-version.outputs.new_version }}.jar
          version: ${{ needs.auto-version.outputs.new_version }}
          changelog: ${{ steps.changelog.outputs.changelog }}
          game-versions: |-
            1.21.x
          featured: true
          channel: release
